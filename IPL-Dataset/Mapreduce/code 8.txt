//8.To determine how many times a team has won toss & match at a particular stadium.

1.	package com.mpr;  
2.	  
3.	import org.apache.hadoop.conf.Configuration;  
4.	import org.apache.hadoop.fs.Path;  
5.	import org.apache.hadoop.io.IntWritable;  
6.	import org.apache.hadoop.io.LongWritable;  
7.	import org.apache.hadoop.io.Text;  
8.	import org.apache.hadoop.mapreduce.Job;  
9.	import org.apache.hadoop.mapreduce.Mapper;  
10.	import org.apache.hadoop.mapreduce.Reducer;  
11.	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  
12.	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;  
13.	import java.io.IOException;  
14.	  
15.	public class Ipl8 {  
16.	    public static class MyMapper extends Mapper<LongWritable, Text, Text,IntWritable> {     
17.	        public void map(LongWritable key, Text value, Context context ) throws IOException, InterruptedException {  
18.	            String MatchString = value.toString();  
19.	                String[] MatchData = MatchString.split( "," );  
20.	                context.write(new Text( MatchData[5].trim().toUpperCase()+"\tTeamId:"+MatchData[2]+"\tTossWinner:"+MatchData[6]+"\tMatchWinner:"+MatchData[13]+"\tNo. of Times:"),new IntWritable(1));  
21.	            }  
22.	                  
23.	        }//end of MyMapper class  
24.	      
25.	    public static class MyReducer extends Reducer<Text, IntWritable, Text, IntWritable> {  
26.	        private IntWritable result = new IntWritable();  
27.	        public void reduce(Text key, Iterable<IntWritable> values, Context context ) throws IOException, InterruptedException {  
28.	            int sum = 0;  
29.	            for (IntWritable val : values) {  
30.	            sum += val.get();  
31.	            }  
32.	            result.set(sum);  
33.	            context.write(key, result);  
34.	            }  
35.	        }//end of MyReducer    
36.	      
37.	    public static void main(String[] args) throws Exception {  
38.	        Configuration conf = new Configuration();  
39.	        Job job = new Job(conf, "Ipl8");  
40.	        //Ignore the warning as new techniques for getting handle to Job is available now.  
41.	        job.setJarByClass( Ipl8.class );  
42.	        job.setMapperClass( MyMapper.class );  
43.	        job.setCombinerClass(MyReducer.class);  
44.	        job.setReducerClass(MyReducer.class);  
45.	        //job.setReducerClass(Reduce.class);  
46.	        job.setMapOutputKeyClass( Text.class );  
47.	        job.setMapOutputValueClass( IntWritable.class );  
48.	        job.setOutputKeyClass( Text.class );  
49.	        job.setOutputValueClass( IntWritable.class );  
50.	        FileInputFormat.addInputPath( job, new Path( args[0] ) );  
51.	        FileOutputFormat.setOutputPath( job, new Path( args[1] ) );  
52.	        System.exit( job.waitForCompletion( true ) ? 0 : 1 );  
53.	        }  
54.	    }
